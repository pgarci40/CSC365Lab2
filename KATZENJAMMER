DROP TABLE IF EXISTS TRACKLISTS;
DROP TABLE IF EXISTS VOCALS;
DROP TABLE IF EXISTS PERFORMANCE;
DROP TABLE IF EXISTS INSTRUMENTS;
DROP TABLE IF EXISTS SONGS;
DROP TABLE IF EXISTS BAND;
DROP TABLE IF EXISTS ALBUMS;

CREATE TABLE ALBUMS (
  AId   INT PRIMARY KEY,
  Title VARCHAR(100) NOT NULL,
  Year  VARCHAR(4)  NOT NULL,   
  Label VARCHAR(100) NOT NULL
);

CREATE TABLE BAND (
  Id INT PRIMARY KEY,
  Firstname VARCHAR(50) NOT NULL,
  Lastname VARCHAR(50) NOT NULL
);

CREATE TABLE SONGS (
  SongId INT PRIMARY KEY,
  Title  VARCHAR(100) NOT NULL
);

CREATE TABLE TRACKLISTS (
  AlbumId  INT NOT NULL,
  Position VARCHAR(10) NOT NULL, 
  SongId INT NOT NULL,
  PRIMARY KEY (AlbumId, Position),
  CONSTRAINT fk_tracklists_albums_aid FOREIGN KEY (AlbumId) REFERENCES ALBUMS(AId),
  CONSTRAINT fk_tracklists_songs_songid FOREIGN KEY (SongId)  REFERENCES SONGS(SongId)
);

CREATE TABLE INSTRUMENTS (
  SongId INT NOT NULL,
  BandmateId INT NOT NULL,
  Instrument VARCHAR(50) NOT NULL,
  PRIMARY KEY (SongId, BandmateId, Instrument),
  CONSTRAINT fk_instruments_songs_songid FOREIGN KEY (SongId) REFERENCES SONGS(SongId),
  CONSTRAINT fk_instruments_band_id FOREIGN KEY (BandmateId) REFERENCES BAND(Id)
);

CREATE TABLE PERFORMANCE (
  SongId INT NOT NULL,
  Bandmate INT NOT NULL,
  StagePosition VARCHAR(50) NOT NULL,
  PRIMARY KEY (SongId, StagePosition),
  CONSTRAINT fk_performance_songs_songid FOREIGN KEY (SongId) REFERENCES SONGS(SongId),
  CONSTRAINT fk_performance_band_id FOREIGN KEY (Bandmate) REFERENCES BAND(Id)
);

CREATE TABLE VOCALS (
  SongId INT NOT NULL,
  Bandmate INT NOT NULL,
  Type VARCHAR(50) NOT NULL,
  PRIMARY KEY (SongId, Type),
  CONSTRAINT fk_vocals_songs_songid FOREIGN KEY (SongId) REFERENCES SONGS(SongId),
  CONSTRAINT fk_vocals_band_id FOREIGN KEY (Bandmate) REFERENCES BAND(Id)
);
